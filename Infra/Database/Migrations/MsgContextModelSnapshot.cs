// <auto-generated />
using System;
using Infra.Database.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Infra.Migrations
{
    [DbContext(typeof(MsgContext))]
    partial class MsgContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("mensageiro")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Domain.BlockInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.HasKey("Id")
                        .HasName("pk_blocks");

                    b.ToTable("blocks");
                });

            modelBuilder.Entity("Domain.ChatGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_chatgroups");

                    b.ToTable("chatgroups");
                });

            modelBuilder.Entity("Domain.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BlockId")
                        .HasColumnType("uuid")
                        .HasColumnName("blockid");

                    b.Property<Guid>("ContactUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("contactuserid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_contacts");

                    b.HasIndex("BlockId")
                        .IsUnique()
                        .HasDatabaseName("ix_contacts_blockid");

                    b.HasIndex("ContactUserId")
                        .HasDatabaseName("ix_contacts_contactuserid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_contacts_userid");

                    b.ToTable("contacts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ee00791-0420-487c-8538-bf7d0812b035"),
                            ContactUserId = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d"),
                            UserId = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2")
                        },
                        new
                        {
                            Id = new Guid("1c52e1cf-b1fb-4e18-ba64-6fee631b533d"),
                            ContactUserId = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596"),
                            UserId = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2")
                        },
                        new
                        {
                            Id = new Guid("0bcfbc8a-2291-4e21-82b7-62fd50abb2a4"),
                            ContactUserId = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5"),
                            UserId = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2")
                        },
                        new
                        {
                            Id = new Guid("59a7de72-46aa-4f99-9053-f77998e6b939"),
                            ContactUserId = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162"),
                            UserId = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2")
                        },
                        new
                        {
                            Id = new Guid("984a42af-c6e0-414e-a073-f1e4d88aef43"),
                            ContactUserId = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51"),
                            UserId = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2")
                        },
                        new
                        {
                            Id = new Guid("02b51f69-e653-44ab-9bc2-7317f317637c"),
                            ContactUserId = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2"),
                            UserId = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d")
                        },
                        new
                        {
                            Id = new Guid("d9fb8ef8-a42d-49cf-8b70-88ec114128c2"),
                            ContactUserId = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596"),
                            UserId = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d")
                        },
                        new
                        {
                            Id = new Guid("38fe32f1-1c20-4d91-a155-895e6f4f0971"),
                            ContactUserId = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5"),
                            UserId = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d")
                        },
                        new
                        {
                            Id = new Guid("1382664e-aedf-49d5-bc1a-556bf74ad8d3"),
                            ContactUserId = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162"),
                            UserId = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d")
                        },
                        new
                        {
                            Id = new Guid("e43ed8c0-cea1-434b-b0cc-42d532c57084"),
                            ContactUserId = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51"),
                            UserId = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d")
                        },
                        new
                        {
                            Id = new Guid("db1d2c39-3b89-4fa9-a8c9-92d95ab4adee"),
                            ContactUserId = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2"),
                            UserId = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596")
                        },
                        new
                        {
                            Id = new Guid("54f1be1a-8a48-43a9-b85b-18ece69b60cd"),
                            ContactUserId = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d"),
                            UserId = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596")
                        },
                        new
                        {
                            Id = new Guid("bad9815f-7db6-4015-9ef6-c7715ebf32e3"),
                            ContactUserId = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5"),
                            UserId = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596")
                        },
                        new
                        {
                            Id = new Guid("99c14afe-2136-464a-86d5-85f440095668"),
                            ContactUserId = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162"),
                            UserId = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596")
                        },
                        new
                        {
                            Id = new Guid("55e0c157-e2f3-406a-b77a-e83ccd86e9d5"),
                            ContactUserId = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51"),
                            UserId = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596")
                        },
                        new
                        {
                            Id = new Guid("9553d96b-7bef-4cd6-84c1-10e5928d5341"),
                            ContactUserId = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2"),
                            UserId = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5")
                        },
                        new
                        {
                            Id = new Guid("9d058082-ea41-4765-8ed6-b4c1bcc64c70"),
                            ContactUserId = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d"),
                            UserId = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5")
                        },
                        new
                        {
                            Id = new Guid("bf1f415f-74cd-4498-a6f6-bb0c80e30c19"),
                            ContactUserId = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596"),
                            UserId = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5")
                        },
                        new
                        {
                            Id = new Guid("5379b302-37eb-4e50-8bf1-141cf1036635"),
                            ContactUserId = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162"),
                            UserId = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5")
                        },
                        new
                        {
                            Id = new Guid("96fb00f2-151f-4202-b513-a2087049afba"),
                            ContactUserId = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51"),
                            UserId = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5")
                        },
                        new
                        {
                            Id = new Guid("e5deb8f7-42ea-4ffa-aa25-9976775e1a4b"),
                            ContactUserId = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2"),
                            UserId = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162")
                        },
                        new
                        {
                            Id = new Guid("3854f03e-428b-4dc6-9f9b-91bbef773db9"),
                            ContactUserId = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d"),
                            UserId = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162")
                        },
                        new
                        {
                            Id = new Guid("bfe245e5-23b3-47a4-bb8a-796eff1cd0fa"),
                            ContactUserId = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596"),
                            UserId = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162")
                        },
                        new
                        {
                            Id = new Guid("5d65e9f1-2e32-4955-b635-fde4c7515bcc"),
                            ContactUserId = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5"),
                            UserId = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162")
                        },
                        new
                        {
                            Id = new Guid("c9ab6a0c-c70d-4bfb-91a9-47cbe7c2fded"),
                            ContactUserId = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51"),
                            UserId = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162")
                        },
                        new
                        {
                            Id = new Guid("49726b60-5062-4de2-ba19-19470a9ac00a"),
                            ContactUserId = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2"),
                            UserId = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51")
                        },
                        new
                        {
                            Id = new Guid("28e1a968-9d36-4f62-9485-2d20f1705564"),
                            ContactUserId = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d"),
                            UserId = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51")
                        },
                        new
                        {
                            Id = new Guid("8414b7f9-ee5e-4bd3-91f7-47e5cff2c04a"),
                            ContactUserId = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596"),
                            UserId = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51")
                        },
                        new
                        {
                            Id = new Guid("f49424f6-f6c1-4312-b1e2-05c1640655a9"),
                            ContactUserId = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5"),
                            UserId = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51")
                        },
                        new
                        {
                            Id = new Guid("07aa5961-2cf0-46d2-a20b-7080df89acb7"),
                            ContactUserId = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162"),
                            UserId = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51")
                        });
                });

            modelBuilder.Entity("Domain.ContactInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("InvitedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("inviteduserid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_contactinvitations");

                    b.HasIndex("InvitedUserId")
                        .HasDatabaseName("ix_contactinvitations_inviteduserid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_contactinvitations_userid");

                    b.ToTable("contactinvitations");
                });

            modelBuilder.Entity("Domain.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("groupid");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sentat");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_messages_groupid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_messages_userid");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2"),
                            Email = "joao.teste@teste.com",
                            Nickname = "João"
                        },
                        new
                        {
                            Id = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d"),
                            Email = "leo.teste@teste.com",
                            Nickname = "Leo"
                        },
                        new
                        {
                            Id = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596"),
                            Email = "mariana.teste@teste.com",
                            Nickname = "Mariana"
                        },
                        new
                        {
                            Id = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5"),
                            Email = "matheus.teste@teste.com",
                            Nickname = "Matheus"
                        },
                        new
                        {
                            Id = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162"),
                            Email = "claudia.teste@teste.com",
                            Nickname = "Claudia"
                        },
                        new
                        {
                            Id = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51"),
                            Email = "luisfelipe.teste@teste.com",
                            Nickname = "Luís Felipe"
                        });
                });

            modelBuilder.Entity("Domain.UserAccount", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hashedpassword");

                    b.HasKey("UserId")
                        .HasName("pk_useraccounts");

                    b.ToTable("useraccounts");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2"),
                            HashedPassword = "$2a$11$aguYvvIy3CaQvgdVxGmCzOTrEG7T96gdGy/O0XAvHHTujDBcqUK9O"
                        },
                        new
                        {
                            UserId = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d"),
                            HashedPassword = "$2a$11$uoYAwovQvV8Q3oXJvddd9.ZwoqRkhxjnDqCG7FVILMTGrTils85hK"
                        },
                        new
                        {
                            UserId = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596"),
                            HashedPassword = "$2a$11$YffUtD7SLXP7zAcu35UnOOmS0cdgD2pOJ.oJLmK0DSRnHuxfji0Kq"
                        },
                        new
                        {
                            UserId = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5"),
                            HashedPassword = "$2a$11$vKuatSDBj4ksTG.dNlvRl.pwl0wIdSOsWUqZzG/3HtWVzasD4Xjt2"
                        },
                        new
                        {
                            UserId = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162"),
                            HashedPassword = "$2a$11$oVh4UfF53vtQWyX544CqceHl9xuBElD/Wrr08z5HYOhYclnfcINky"
                        },
                        new
                        {
                            UserId = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51"),
                            HashedPassword = "$2a$11$yMaGo6IAgVsM2RzCo2gfS.LPBn9NBZLbFZgwFtmJAD1A1rw4j2586"
                        });
                });

            modelBuilder.Entity("Domain.UserGroupRelationship", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("groupid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("GroupId", "UserId")
                        .HasName("pk_usergrouprelationships");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_usergrouprelationships_groupid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_usergrouprelationships_userid");

                    b.ToTable("usergrouprelationships");
                });

            modelBuilder.Entity("Domain.Contact", b =>
                {
                    b.HasOne("Domain.BlockInfo", "Block")
                        .WithOne()
                        .HasForeignKey("Domain.Contact", "BlockId")
                        .HasConstraintName("blockid");

                    b.HasOne("Domain.User", "ContactUser")
                        .WithMany()
                        .HasForeignKey("ContactUserId")
                        .HasConstraintName("contactuserid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("ContactUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.ContactInvitation", b =>
                {
                    b.HasOne("Domain.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId")
                        .HasConstraintName("inviteduserid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvitedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Message", b =>
                {
                    b.HasOne("Domain.ChatGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("groupid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.UserAccount", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithOne()
                        .HasForeignKey("Domain.UserAccount", "UserId")
                        .HasConstraintName("fk_useraccounts_users_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.UserGroupRelationship", b =>
                {
                    b.HasOne("Domain.ChatGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_usergrouprelationships_chatgroups_groupid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_usergrouprelationships_users_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("user");
                });
#pragma warning restore 612, 618
        }
    }
}
