// <auto-generated />
using System;
using Infra.Database.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Infra.Migrations
{
    [DbContext(typeof(MsgContext))]
    [Migration("20211027032210_AddTestData")]
    partial class AddTestData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("mensageiro")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Domain.BlockInfo", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.HasKey("Guid")
                        .HasName("pk_blocks");

                    b.ToTable("blocks");
                });

            modelBuilder.Entity("Domain.ChatGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_chatgroups");

                    b.ToTable("chatgroups");
                });

            modelBuilder.Entity("Domain.Contact", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid?>("BlockGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("blockguid");

                    b.Property<Guid>("ContactUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("contactuserguid");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("userguid");

                    b.HasKey("Guid")
                        .HasName("pk_contacts");

                    b.HasIndex("BlockGuid")
                        .IsUnique()
                        .HasDatabaseName("ix_contacts_blockguid");

                    b.HasIndex("ContactUserGuid")
                        .HasDatabaseName("ix_contacts_contactuserguid");

                    b.HasIndex("UserGuid")
                        .HasDatabaseName("ix_contacts_userguid");

                    b.ToTable("contacts");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("6ed47c78-6047-40cb-8d99-73c0213e74b1"),
                            ContactUserGuid = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d"),
                            UserGuid = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2")
                        },
                        new
                        {
                            Guid = new Guid("f88f0d53-2999-43de-9fcb-a67d23858840"),
                            ContactUserGuid = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596"),
                            UserGuid = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2")
                        },
                        new
                        {
                            Guid = new Guid("3ea5a3b1-4d1e-4432-bec5-e0894762021b"),
                            ContactUserGuid = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5"),
                            UserGuid = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2")
                        },
                        new
                        {
                            Guid = new Guid("507f93db-40f9-403e-aeda-79cb3c157e7f"),
                            ContactUserGuid = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162"),
                            UserGuid = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2")
                        },
                        new
                        {
                            Guid = new Guid("e0146d01-6ca6-47ab-b1b0-3388124957fc"),
                            ContactUserGuid = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51"),
                            UserGuid = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2")
                        },
                        new
                        {
                            Guid = new Guid("787bd985-a7eb-477b-899d-2f5bfd1628dc"),
                            ContactUserGuid = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2"),
                            UserGuid = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d")
                        },
                        new
                        {
                            Guid = new Guid("a5e1a9e4-8756-4edc-9930-3a2ea6d4ba98"),
                            ContactUserGuid = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596"),
                            UserGuid = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d")
                        },
                        new
                        {
                            Guid = new Guid("7655b59b-33b0-48fd-8b30-5cffc16220ec"),
                            ContactUserGuid = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5"),
                            UserGuid = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d")
                        },
                        new
                        {
                            Guid = new Guid("cacddfe6-b38d-4fc4-9dea-7c07afe694e0"),
                            ContactUserGuid = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162"),
                            UserGuid = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d")
                        },
                        new
                        {
                            Guid = new Guid("7352bbdc-6ec5-4ed9-81bc-27c2581fa644"),
                            ContactUserGuid = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51"),
                            UserGuid = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d")
                        },
                        new
                        {
                            Guid = new Guid("411bb938-2af9-45c1-815f-e8d8cc64f80f"),
                            ContactUserGuid = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2"),
                            UserGuid = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596")
                        },
                        new
                        {
                            Guid = new Guid("ee0b3e2b-d497-4c2e-9cf4-a69b59462270"),
                            ContactUserGuid = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d"),
                            UserGuid = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596")
                        },
                        new
                        {
                            Guid = new Guid("c0d8bdd2-27e5-48e2-bc9b-666340ae4eb1"),
                            ContactUserGuid = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5"),
                            UserGuid = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596")
                        },
                        new
                        {
                            Guid = new Guid("7f6c20f6-caba-4cea-ac81-3d4ddee33fae"),
                            ContactUserGuid = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162"),
                            UserGuid = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596")
                        },
                        new
                        {
                            Guid = new Guid("f2aebdd5-cb77-4e77-bbf9-1819faba1af3"),
                            ContactUserGuid = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51"),
                            UserGuid = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596")
                        },
                        new
                        {
                            Guid = new Guid("707b42ec-6cac-4d16-b70e-b278c7bc91c7"),
                            ContactUserGuid = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2"),
                            UserGuid = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5")
                        },
                        new
                        {
                            Guid = new Guid("8cd2dad0-b82e-4c6d-b3cf-d49727e69f91"),
                            ContactUserGuid = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d"),
                            UserGuid = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5")
                        },
                        new
                        {
                            Guid = new Guid("bcf6c1c4-5ebe-44aa-bab8-6c7abde2a56e"),
                            ContactUserGuid = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596"),
                            UserGuid = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5")
                        },
                        new
                        {
                            Guid = new Guid("9c693843-ce4f-4d95-a67e-31d90070c167"),
                            ContactUserGuid = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162"),
                            UserGuid = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5")
                        },
                        new
                        {
                            Guid = new Guid("1ea6f2b8-b2f1-45be-aeda-ce17fd1bfd99"),
                            ContactUserGuid = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51"),
                            UserGuid = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5")
                        },
                        new
                        {
                            Guid = new Guid("0abd69fd-607e-4799-a949-649b934c9580"),
                            ContactUserGuid = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2"),
                            UserGuid = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162")
                        },
                        new
                        {
                            Guid = new Guid("5a2e29e3-eb77-434d-855b-2ce871ac1e81"),
                            ContactUserGuid = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d"),
                            UserGuid = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162")
                        },
                        new
                        {
                            Guid = new Guid("b7b68cbc-dc6f-42d6-99bc-1d12448c3864"),
                            ContactUserGuid = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596"),
                            UserGuid = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162")
                        },
                        new
                        {
                            Guid = new Guid("ac1c7692-c1fd-4d99-aa5a-ce21de22ad46"),
                            ContactUserGuid = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5"),
                            UserGuid = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162")
                        },
                        new
                        {
                            Guid = new Guid("be80e0de-3b2e-4b66-84fd-c7f21bc9758c"),
                            ContactUserGuid = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51"),
                            UserGuid = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162")
                        },
                        new
                        {
                            Guid = new Guid("7eeaafc4-fdf8-4ab6-9e07-2e936a400351"),
                            ContactUserGuid = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2"),
                            UserGuid = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51")
                        },
                        new
                        {
                            Guid = new Guid("180b54ed-86f5-4619-b5a9-553add5bea58"),
                            ContactUserGuid = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d"),
                            UserGuid = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51")
                        },
                        new
                        {
                            Guid = new Guid("929db624-8d41-4345-adba-d3049fc199ad"),
                            ContactUserGuid = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596"),
                            UserGuid = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51")
                        },
                        new
                        {
                            Guid = new Guid("edfdc02a-8b3d-435b-8d68-93cc83d72fc1"),
                            ContactUserGuid = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5"),
                            UserGuid = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51")
                        },
                        new
                        {
                            Guid = new Guid("4116e323-770d-4a3a-b8bf-c7668ce3b43e"),
                            ContactUserGuid = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162"),
                            UserGuid = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51")
                        });
                });

            modelBuilder.Entity("Domain.ContactInvitation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("InvitedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("inviteduserguid");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("userguid");

                    b.HasKey("Guid")
                        .HasName("pk_contactinvitation");

                    b.HasIndex("InvitedUserGuid")
                        .HasDatabaseName("ix_contactinvitation_inviteduserguid");

                    b.HasIndex("UserGuid")
                        .HasDatabaseName("ix_contactinvitation_userguid");

                    b.ToTable("contactinvitation");
                });

            modelBuilder.Entity("Domain.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("groupid");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sentat");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_messages_groupid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_messages_userid");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.HasKey("Guid")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2"),
                            Email = "joao.teste@teste.com",
                            Nickname = "João"
                        },
                        new
                        {
                            Guid = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d"),
                            Email = "leo.teste@teste.com",
                            Nickname = "Leo"
                        },
                        new
                        {
                            Guid = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596"),
                            Email = "mariana.teste@teste.com",
                            Nickname = "Mariana"
                        },
                        new
                        {
                            Guid = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5"),
                            Email = "matheus.teste@teste.com",
                            Nickname = "Matheus"
                        },
                        new
                        {
                            Guid = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162"),
                            Email = "claudia.teste@teste.com",
                            Nickname = "Claudia"
                        },
                        new
                        {
                            Guid = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51"),
                            Email = "luisfelipe.teste@teste.com",
                            Nickname = "Luís Felipe"
                        });
                });

            modelBuilder.Entity("Domain.UserAccount", b =>
                {
                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("userguid");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hashedpassword");

                    b.HasKey("UserGuid")
                        .HasName("pk_useraccounts");

                    b.ToTable("useraccounts");

                    b.HasData(
                        new
                        {
                            UserGuid = new Guid("d9f0c3e1-02f6-4ce5-bf74-b7c0f14cf2d2"),
                            HashedPassword = "$2a$11$z5SbtX7GPNS5nFSY0bhWZ.P5pw35.MEAV3YUlmxejHXJBfndnEepu"
                        },
                        new
                        {
                            UserGuid = new Guid("8a4b6a86-a053-46ac-9ba6-04eacaf5bf7d"),
                            HashedPassword = "$2a$11$hvSBox04vb3Z8B23PcV1q.oxhfzuIuJaXbI2L3X.Xcstgfi2u4oOa"
                        },
                        new
                        {
                            UserGuid = new Guid("3fc9e8d0-9a65-459f-ade4-57fe754f7596"),
                            HashedPassword = "$2a$11$GTReISRdU5brf4lDhyKDfOKzopu3hivWeVzDS3f1.iihIPuS9qCvW"
                        },
                        new
                        {
                            UserGuid = new Guid("1e35ccb4-7d5a-4747-9cb0-62a875f44fd5"),
                            HashedPassword = "$2a$11$bCpQt3fslvmv1NZNRf0t5uWPc4litq5NkX8.8kLnFYLOJDIYWqWQW"
                        },
                        new
                        {
                            UserGuid = new Guid("4faaf336-27d2-4680-a2ae-78ec6c0b4162"),
                            HashedPassword = "$2a$11$oRtqCxm3EJTTPasfK2fmi.x0tnWO7WuinI5huob/M3Z67WBEF9ky6"
                        },
                        new
                        {
                            UserGuid = new Guid("7b2601b8-0af4-43d3-9dda-f1db0cd7dd51"),
                            HashedPassword = "$2a$11$sZieAJ7i.Cz.sWvlhe1uZupFJWGvaBGQw0q.kRKvs3i.8q16AQwBS"
                        });
                });

            modelBuilder.Entity("Domain.UserGroupRelationship", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("groupid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("GroupId", "UserId")
                        .HasName("pk_usergrouprelationships");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_usergrouprelationships_groupid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_usergrouprelationships_userid");

                    b.ToTable("usergrouprelationships");
                });

            modelBuilder.Entity("Domain.Contact", b =>
                {
                    b.HasOne("Domain.BlockInfo", "Block")
                        .WithOne()
                        .HasForeignKey("Domain.Contact", "BlockGuid")
                        .HasConstraintName("blockguid");

                    b.HasOne("Domain.User", "ContactUser")
                        .WithMany()
                        .HasForeignKey("ContactUserGuid")
                        .HasConstraintName("contactuserguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserGuid")
                        .HasConstraintName("userguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("ContactUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.ContactInvitation", b =>
                {
                    b.HasOne("Domain.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserGuid")
                        .HasConstraintName("inviteduserguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserGuid")
                        .HasConstraintName("userguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvitedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Message", b =>
                {
                    b.HasOne("Domain.ChatGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("groupid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.UserAccount", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithOne()
                        .HasForeignKey("Domain.UserAccount", "UserGuid")
                        .HasConstraintName("fk_useraccounts_users_userguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.UserGroupRelationship", b =>
                {
                    b.HasOne("Domain.ChatGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_usergrouprelationships_chatgroups_groupid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_usergrouprelationships_users_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("user");
                });
#pragma warning restore 612, 618
        }
    }
}
